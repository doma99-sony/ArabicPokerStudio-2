import { useState, useEffect, useRef } from "react";
import { useAuth } from "@/hooks/use-auth";
import { useWebSocket } from "@/hooks/use-websocket";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Send } from "lucide-react";
import { Image } from "@/components/ui/image";

interface ChatMessage {
  id: string;
  username: string;
  message: string;
  avatar?: string;
}

export function ChatBox() {
  const { user } = useAuth();
  const { socket } = useWebSocket();
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [newMessage, setNewMessage] = useState("");
  const scrollAreaRef = useRef<HTMLDivElement>(null);

  // تحديث الرسائل عند استلام رسالة جديدة
  useEffect(() => {
    if (socket) {
      const messageHandler = (event: MessageEvent) => {
        const data = JSON.parse(event.data);
        if (data.type === "chat_message") {
          setMessages(prev => [...prev, {
            id: data.id,
            username: data.username,
            message: data.message,
            avatar: data.avatar
          }]);
        }
      };

      socket.addEventListener('message', messageHandler);

      return () => {
        socket.removeEventListener('message', messageHandler);  // تنظيف الدالة عند التحديث
      };
    }
  }, [socket]);

  // التمرير التلقائي إلى آخر رسالة
  useEffect(() => {
    if (scrollAreaRef.current) {
      const scrollElement = scrollAreaRef.current.querySelector('[data-radix-scroll-area-viewport]');
      if (scrollElement) {
        scrollElement.scrollTop = scrollElement.scrollHeight;
      }
    }
  }, [messages]);

  const sendChatMessage = () => {
    if (newMessage.trim() && user) {
      const messageData = {
        type: "chat_message",
        message: newMessage.trim(),
        username: user.username,
        avatar: user.avatar,
        id: Date.now().toString()  // استخدم معرف فريد
      };
      socket?.send(JSON.stringify(messageData));
      setNewMessage("");
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      sendChatMessage();
    }
  };

  return (
    <div className="w-full h-[400px] bg-black/50 rounded-lg border border-gold/10 overflow-hidden flex flex-col">
      <div className="bg-[#1B4D3E] p-3 flex items-center">
        <h3 className="text-white font-bold text-sm">الدردشة العامة</h3>
      </div>

      <ScrollArea ref={scrollAreaRef} className="flex-1 p-4">
        <div className="space-y-3">
          {messages.map((msg) => (
            <div key={msg.id} className="flex flex-col">
              <div className="flex items-center gap-2 mb-1">
                <div className="w-6 h-6 rounded-full overflow-hidden bg-gold/20 border border-gold/30">
                  {msg.avatar ? (
                    <Image 
                      src={msg.avatar} 
                      alt={msg.username} 
                      className="w-full h-full object-cover"
                      fallback="https://via.placeholder.com/24?text=?"
                    />
                  ) : (
                    <div className="w-full h-full flex items-center justify-center text-gold/70 text-xs">
                      {msg.username[0]?.toUpperCase()}
                    </div>
                  )}
                </div>
                <span className="text-xs text-gold/60">{msg.username}</span>
              </div>
              <div className={`p-2 max-w-[80%] ${
                msg.username === user?.username
                  ? "bg-gold/90 text-black rounded-t-2xl rounded-l-2xl rounded-br-sm mr-auto"
                  : "bg-white/90 text-black rounded-t-2xl rounded-r-2xl rounded-bl-sm border-2 border-gold/30"
              }`}>
                {msg.message}
              </div>
            </div>
          ))}
        </div>
      </ScrollArea>

      <div className="p-3 border-t border-gold/10 bg-black/30">
        <div className="flex gap-2">
          <Input
            value={newMessage}
            onChange={(e) => setNewMessage(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder="اكتب رسالتك..."
            className="flex-1 text-sm"
          />
          <Button
            onClick={sendChatMessage}
            className="bg-gold hover:bg-gold/80 text-black px-3"
          >
            <Send className="h-4 w-4" />
          </Button>
        </div>
      </div>
    </div>
  );
}